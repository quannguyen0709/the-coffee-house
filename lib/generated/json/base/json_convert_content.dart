// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;

import '../../../call_api_service/model/discount/discount_entity.dart';
import '../../../call_api_service/model/history_order/history_order_entity.dart';
import '../../../call_api_service/model/media_box/media_box_entity.dart';
import '../../../call_api_service/model/membership/membership_entity.dart';
import '../../../call_api_service/model/menu/menu_entity.dart';
import '../../../call_api_service/model/new_feed/new_feeds_entity.dart';
import '../../../call_api_service/model/stores/stores_entity.dart';
import '../../../call_api_service/model/user/user_entity.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(Object error, StackTrace stackTrace);
extension MapSafeExt<K, V> on Map<K, V> {
  T? getOrNull<T>(K? key) {
    if (!containsKey(key) || key == null) {
      return null;
    } else {
      return this[key] as T?;
    }
  }
}

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert))
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) =>
      _asT<T>(e, enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        return convertFuncMap[type]!(value as Map<String, dynamic>) as T;
      } else {
        throw UnimplementedError(
            '$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<DiscountEntity>[] is M) {
      return data.map<DiscountEntity>((Map<String, dynamic> e) =>
          DiscountEntity.fromJson(e)).toList() as M;
    }
    if (<DiscountError>[] is M) {
      return data.map<DiscountError>((Map<String, dynamic> e) =>
          DiscountError.fromJson(e)).toList() as M;
    }
    if (<DiscountResults>[] is M) {
      return data.map<DiscountResults>((Map<String, dynamic> e) =>
          DiscountResults.fromJson(e)).toList() as M;
    }
    if (<DiscountResultsCampaigns>[] is M) {
      return data.map<DiscountResultsCampaigns>((Map<String, dynamic> e) =>
          DiscountResultsCampaigns.fromJson(e)).toList() as M;
    }
    if (<DiscountResultsCampaignsCoupons>[] is M) {
      return data.map<DiscountResultsCampaignsCoupons>((
          Map<String, dynamic> e) =>
          DiscountResultsCampaignsCoupons.fromJson(e)).toList() as M;
    }
    if (<HistoryOrderEntity>[] is M) {
      return data.map<HistoryOrderEntity>((Map<String, dynamic> e) =>
          HistoryOrderEntity.fromJson(e)).toList() as M;
    }
    if (<HistoryOrderHistories>[] is M) {
      return data.map<HistoryOrderHistories>((Map<String, dynamic> e) =>
          HistoryOrderHistories.fromJson(e)).toList() as M;
    }
    if (<HistoryOrderHistoriesRating>[] is M) {
      return data.map<HistoryOrderHistoriesRating>((Map<String, dynamic> e) =>
          HistoryOrderHistoriesRating.fromJson(e)).toList() as M;
    }
    if (<MediaBoxEntity>[] is M) {
      return data.map<MediaBoxEntity>((Map<String, dynamic> e) =>
          MediaBoxEntity.fromJson(e)).toList() as M;
    }
    if (<MediaBoxData>[] is M) {
      return data.map<MediaBoxData>((Map<String, dynamic> e) =>
          MediaBoxData.fromJson(e)).toList() as M;
    }
    if (<MembershipEntity>[] is M) {
      return data.map<MembershipEntity>((Map<String, dynamic> e) =>
          MembershipEntity.fromJson(e)).toList() as M;
    }
    if (<MembershipProfile>[] is M) {
      return data.map<MembershipProfile>((Map<String, dynamic> e) =>
          MembershipProfile.fromJson(e)).toList() as M;
    }
    if (<MenuEntity>[] is M) {
      return data.map<MenuEntity>((Map<String, dynamic> e) =>
          MenuEntity.fromJson(e)).toList() as M;
    }
    if (<MenuMenu>[] is M) {
      return data.map<MenuMenu>((Map<String, dynamic> e) =>
          MenuMenu.fromJson(e)).toList() as M;
    }
    if (<MenuMenuProducts>[] is M) {
      return data.map<MenuMenuProducts>((Map<String, dynamic> e) =>
          MenuMenuProducts.fromJson(e)).toList() as M;
    }
    if (<MenuMenuProductsOptions>[] is M) {
      return data.map<MenuMenuProductsOptions>((Map<String, dynamic> e) =>
          MenuMenuProductsOptions.fromJson(e)).toList() as M;
    }
    if (<MenuMenuProductsOptionsItems>[] is M) {
      return data.map<MenuMenuProductsOptionsItems>((Map<String, dynamic> e) =>
          MenuMenuProductsOptionsItems.fromJson(e)).toList() as M;
    }
    if (<MenuMenuProductsOptionsItemsLocalize>[] is M) {
      return data.map<MenuMenuProductsOptionsItemsLocalize>((
          Map<String, dynamic> e) =>
          MenuMenuProductsOptionsItemsLocalize.fromJson(e)).toList() as M;
    }
    if (<NewFeedsEntity>[] is M) {
      return data.map<NewFeedsEntity>((Map<String, dynamic> e) =>
          NewFeedsEntity.fromJson(e)).toList() as M;
    }
    if (<NewFeedsNews>[] is M) {
      return data.map<NewFeedsNews>((Map<String, dynamic> e) =>
          NewFeedsNews.fromJson(e)).toList() as M;
    }
    if (<NewFeedsNewsPosts>[] is M) {
      return data.map<NewFeedsNewsPosts>((Map<String, dynamic> e) =>
          NewFeedsNewsPosts.fromJson(e)).toList() as M;
    }
    if (<StoresEntity>[] is M) {
      return data.map<StoresEntity>((Map<String, dynamic> e) =>
          StoresEntity.fromJson(e)).toList() as M;
    }
    if (<StoresStores>[] is M) {
      return data.map<StoresStores>((Map<String, dynamic> e) =>
          StoresStores.fromJson(e)).toList() as M;
    }
    if (<StoresStoresLocation>[] is M) {
      return data.map<StoresStoresLocation>((Map<String, dynamic> e) =>
          StoresStoresLocation.fromJson(e)).toList() as M;
    }
    if (<UserEntity>[] is M) {
      return data.map<UserEntity>((Map<String, dynamic> e) =>
          UserEntity.fromJson(e)).toList() as M;
    }
    if (<UserProfile>[] is M) {
      return data.map<UserProfile>((Map<String, dynamic> e) =>
          UserProfile.fromJson(e)).toList() as M;
    }
    if (<UserProfilePhone>[] is M) {
      return data.map<UserProfilePhone>((Map<String, dynamic> e) =>
          UserProfilePhone.fromJson(e)).toList() as M;
    }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(
          json.map((dynamic e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (DiscountEntity).toString(): DiscountEntity.fromJson,
    (DiscountError).toString(): DiscountError.fromJson,
    (DiscountResults).toString(): DiscountResults.fromJson,
    (DiscountResultsCampaigns).toString(): DiscountResultsCampaigns.fromJson,
    (DiscountResultsCampaignsCoupons)
        .toString(): DiscountResultsCampaignsCoupons.fromJson,
    (HistoryOrderEntity).toString(): HistoryOrderEntity.fromJson,
    (HistoryOrderHistories).toString(): HistoryOrderHistories.fromJson,
    (HistoryOrderHistoriesRating).toString(): HistoryOrderHistoriesRating
        .fromJson,
    (MediaBoxEntity).toString(): MediaBoxEntity.fromJson,
    (MediaBoxData).toString(): MediaBoxData.fromJson,
    (MembershipEntity).toString(): MembershipEntity.fromJson,
    (MembershipProfile).toString(): MembershipProfile.fromJson,
    (MenuEntity).toString(): MenuEntity.fromJson,
    (MenuMenu).toString(): MenuMenu.fromJson,
    (MenuMenuProducts).toString(): MenuMenuProducts.fromJson,
    (MenuMenuProductsOptions).toString(): MenuMenuProductsOptions.fromJson,
    (MenuMenuProductsOptionsItems).toString(): MenuMenuProductsOptionsItems
        .fromJson,
    (MenuMenuProductsOptionsItemsLocalize)
        .toString(): MenuMenuProductsOptionsItemsLocalize.fromJson,
    (NewFeedsEntity).toString(): NewFeedsEntity.fromJson,
    (NewFeedsNews).toString(): NewFeedsNews.fromJson,
    (NewFeedsNewsPosts).toString(): NewFeedsNewsPosts.fromJson,
    (StoresEntity).toString(): StoresEntity.fromJson,
    (StoresStores).toString(): StoresStores.fromJson,
    (StoresStoresLocation).toString(): StoresStoresLocation.fromJson,
    (UserEntity).toString(): UserEntity.fromJson,
    (UserProfile).toString(): UserProfile.fromJson,
    (UserProfilePhone).toString(): UserProfilePhone.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}